
---

**5.1 CONTEXT-FREE GRAMMARS**

The productions in a regular grammar are restricted in two ways: The left side must be a single variable, while the right side has a special form. To create grammars that are more powerful, we must relax some of these restrictions. By retaining the restriction on the left side, but permitting anything on the right, we get context-free grammars.

**DEFINITION 5.1**

A grammar \( G = (V, T, S, P) \) is said to be **context-free** if all productions in \( P \) have the form  
\[ A \to x, \]  
where \( A \in V \) and \( x \in (V \cup T)^* \).  

A language \( L \) is said to be context-free if and only if there is a context-free grammar \( G \) such that  
\[ L = L(G). \]

Every regular grammar is context-free, so a regular language is also a context-free one. But, as we know from simple examples such as \([a^n b^m]\), there are nonregular languages. We have already shown in Example 1.11 that this language can be generated by a context-free grammar, so we see that the family of regular languages is a proper subset of the family of context-free languages.  

Context-free grammars derive their name from the fact that the substitution of the variable on the left of a production can be made any time such a variable appears in a sentential form. It does not depend on the symbols in the rest of the sentential form (the context). This feature is the consequence of allowing only a single variable on the left side of the production.

---

**Examples of Context-Free Languages**

**EXAMPLE 5.1**  
The grammar \( G = ([S], \{a, b\}, S, P) \), with productions  
\[S \to aSa,\]  
\[S \to bSb,\]  
\[S \to \lambda,\]  
is context-free. A typical derivation in this grammar is  
\[S \Rightarrow aSa \Rightarrow aaSaa \Rightarrow aabSbaa \Rightarrow aabbaa.\]  
This, and similar derivations, make it clear that  
\[L (G) = \{ww^R : w \in \{a, b\}^*\}.\]  
The language is context-free, but as shown in Example 4.8, it is not regular.

**EXAMPLE 5.2**  
The grammar \( G \), with productions  
\[S \to abB,\]  
\[A \to aaBb,\]  
\[B \to bbAa,\]  
\[A \to \lambda,\]  
is context-free. We leave it to the reader to show that  
\[ L(G) = \{ ab \, (bbaa)^n \, bba \, (ba)^n : n \geq 0\}. \]

Both of the above examples involve grammars that are not only context-free, but linear. Regular and linear grammars are clearly context-free, but a context-free grammar is not necessarily linear.

**EXAMPLE 5.3**  
The language  
\[ L = \{a^n b^m : n \ne m\} \]  
is context-free.

To show this, we need to produce a context-free grammar for the language. The case of \( n = m \) is solved in Example 1.11 and we can build on that solution. Take the case \( n > m \). We first generate a string with an equal number of \( a \)'s and \( b \)'s, then add extra \( a \)'s on the left. This is done with  
\[ S \rightarrow AS_1, \]  
\[ S_1 \rightarrow aS_1b|\lambda, \]  
\[ A \rightarrow aA|a. \]

We can use similar reasoning for the case \( n < m \), and we get the answer  
\[ S \rightarrow AS_1|S_1B, \]  
\[ S_1 \rightarrow aS_1b|\lambda, \]  
\[ A \rightarrow aA|a, \]  
\[ B \rightarrow bB|b. \]

The resulting grammar is context-free, hence \( L \) is a context-free language. However, the grammar is not linear.

The particular form of the grammar given here was chosen for the purpose of illustration; there are many other equivalent context-free grammars. In fact, there are some simple linear ones for this language. In Exercise 26 at the end of this section you are asked to find one of them.

**EXAMPLE 5.4**  
Consider the grammar with productions  
\[ S \to aSb \mid SS \mid \lambda. \]  
This is another grammar that is context-free, but not linear. Some strings in \( L(G) \) are abaabb, aababb, and ababab. It is not difficult to conjecture and prove that  
\[ L = \{ w \in \{a, b\}^{*} : n_a(w) = n_b (w) \text{ and } n_a(v) \geq n_b(v), \]  
where \( v \) is any prefix of \( w \).

We can see the connection with programming languages clearly if we replace \( a \) and \( b \) with left and right parentheses, respectively. The language \( L \) includes such strings as (0) and (0 0 0) and is in fact the set of all properly nested parenthesis structures for the common programming languages.

Here again there are many other equivalent grammars. But, in contrast to Example 5.3, it is not so easy to see if there are any linear ones. We will have to wait until Chapter 8 before we can answer this question.

---

**Leftmost and Rightmost Derivations**

In a grammar that is not linear, a derivation may involve sentential forms with more than one variable. In such cases, we have a choice in the order in which variables are replaced. Take, for example, the grammar \( G = \langle \{A, B, S\}, \{a, b\}, S, P \rangle \) with productions  
1. \( S \to AB \).  
2. \( A \to aaA \).  
3. \( A \to \lambda \).  
4. \( B \to Bb \).  
5. \( B \to \lambda \).  

This grammar generates the language \( L(G) = \{a^{2n}b^m : n \geq 0, m \geq 0\} \). Carry out a few derivations to convince yourself of this.

Consider now the two derivations  

1  2  3  4  5  
\( S \Rightarrow AB \Rightarrow aaAB \Rightarrow aaB \Rightarrow aaBb \Rightarrow aab \)  

and  
\[ S \Rightarrow AB \Rightarrow ABb \Rightarrow aaABb \Rightarrow aaAb \Rightarrow aab. \]  

In order to show which production is applied, we have numbered the productions and written the appropriate number on the \(\Rightarrow\) symbol. From this we see that the two derivations not only yield the same sentence but also use exactly the same productions. The difference is entirely in the order in which the productions are applied. To remove such irrelevant factors, we often require that the variables be replaced in a specific order.

**DEFINITION 5.2**  
A derivation is said to be **leftmost** if in each step the leftmost variable in the sentential form is replaced. If in each step the rightmost variable is replaced, we call the derivation **rightmost**.

---

**EXAMPLE 5.5**  
Consider the grammar with productions  
\[S \to aAB,\]  
\[A \to bBb,\]  
\[B \to A|\lambda.\]  

Then  
\[S \Rightarrow aAB \Rightarrow abBbB \Rightarrow abAbB \Rightarrow abbBbbB \Rightarrow abbbbB \Rightarrow abbbb\]  
is a leftmost derivation of the string \( abbbb \). A rightmost derivation of the same string is  
\[S \Rightarrow aAB \Rightarrow aA \Rightarrow abBb \Rightarrow abAb \Rightarrow abbBbb \Rightarrow abbbb.\]

---

**Derivation Trees**

A second way of showing derivations, independent of the order in which productions are used, is by a **derivation** or **parse tree**. A derivation tree is an ordered tree in which nodes are labeled with the left sides of productions and in which the children of a node represent its corresponding right sides. For example, Figure 5.1 shows part of a derivation tree representing the production.  

![Graph]  
- \( A \)  
- \( b \)  
- \( c \)  

**FIGURE 5.1**  
\[A \rightarrow abABC.\]

In a derivation tree, a node labeled with a variable occurring on the left side of a production has children consisting of the symbols on the right side of that production. Beginning with the root, labeled with the start symbol and ending in leaves that are terminals, a derivation tree shows how each variable is replaced in the derivation. The following definition makes this notion precise.

**DEFINITION 5.3**  
Let \( G = (V, T, S, P) \) be a context-free grammar. An ordered tree is a derivation tree for \( G \) if and only if it has the following properties.  
1. The root is labeled \( S \).  
2. Every leaf has a label from \( T \cup \{ \lambda \} \).  
3. Every interior vertex (a vertex that is not a leaf) has a label from \( V \).  
4. If a vertex has label \( A \in V \), and its children are labeled (from left to right) \( a_1, a_2, ..., a_n \), then \( P \) must contain a production of the form \( A \to a_1 a_2 \cdots a_n \).  
5. A leaf labeled \( \lambda \) has no siblings, that is, a vertex with a child labeled \( \lambda \) can have no other children.

A tree that has properties 3, 4, and 5, but in which 1 does not necessarily hold and in which property 2 is replaced by 2a. Every leaf has a label from \( V \cup T \cup \{\lambda\} \), is said to be a partial derivation tree.

The string of symbols obtained by reading the leaves of the tree from left to right, omitting any \( \lambda \)’s encountered, is said to be the yield of the tree. The descriptive term left to right can be given a precise meaning. The yield is the string of terminals in the order they are encountered when the tree is traversed in a depth-first manner, always taking the leftmost unexplored branch.

---

**EXAMPLE 5.6**  
Consider the grammar \( G \), with productions  
\[S \to aAB,\]  
\[A \to bBb,\]  
\[B \to A|\lambda.\]  

The tree in Figure 5.2 is a partial derivation tree for \( G \), while the tree in Figure 5.3 is a derivation tree. The string \( abBbB \), which is the yield of the first tree, is a sentential form of \( G \). The yield of the second tree, \( abbbb \), is a sentence of \( L(G) \).

**FIGURE 5.2**  
a  
b  
S  
A  
B  
S  
A  
B  
b  
b  
A  
b  
B  
A  
b  
b  

**FIGURE 5.3**

---

**Relation Between Sentential Forms and Derivation Trees**

Derivation trees give a very explicit and easily comprehended description of a derivation. Like transition graphs for finite automata, this explicitness is a great help in making arguments. First, though, we must establish the connection between derivations and derivation trees.

**THEOREM 5.1**  
Let \( G = (V, T, S, P) \) be a context-free grammar. Then for every \( w \in L(G) \), there exists a derivation tree of \( G \) whose yield is \( w \). Conversely, the yield of any derivation tree is in \( L(G) \). Also, if \( t_G \) is any partial derivation tree for \( G \) whose root is labeled \( S \), then the yield of \( t_G \) is a sentential form of \( G \).

**Proof:** First we show that for every sentential form of \( L(G) \) there is a corresponding partial derivation tree. We do this by induction on the number of steps in the derivation. As a basis, we note that the claimed result is true for every sentential form derivable in one step. Since \( S \to u \) implies that there is a production \( S \to u \), this follows immediately from Definition 5.3.

Assume that for every sentential form derivable in \( n \) steps, there is a corresponding partial derivation tree. Now any \( w \) derivable in \( n + 1 \) steps must be such that  
\[*\]  
\[S \Rightarrow xAy, \quad x, y \in (V \cup T)^*, \quad A \in V,\]  
in \( n \) steps, and  
\[xAy \Rightarrow xa_1a_2 \cdots a_my = w, \quad a_i \in V \cup T.\]

Since by the inductive assumption there is a partial derivation tree with yield \( xAy \), and since the grammar must have production \( A \to a_1a_2 \cdots a_m \), we see that by expanding the leaf labeled \( A \), we get a partial derivation tree with yield \( xa_1a_2 \cdots a_m y = w \). By induction, we therefore claim that the result is true for all sentential forms.

In a similar vein, we can show that every partial derivation tree represents some sentential form. We will leave this as an exercise.

Since a derivation tree is also a partial derivation tree whose leaves are terminals, it follows that every sentence in \( L(G) \) is the yield of some derivation tree of \( G \) and that the yield of every derivation tree is in \( L(G) \).

Derivation trees show which productions are used in obtaining a sentence, but do not give the order of their application. Derivation trees are able to represent any derivation, reflecting the fact that this order is irrelevant, an observation that allows us to close a gap in the preceding discussion. By definition, any \( w \in L(G) \) has a derivation, but we have not claimed that it also had a leftmost or rightmost derivation. However, once we have a derivation tree, we can always get a leftmost derivation by thinking of the tree as having been built in such a way that the leftmost variable in the tree was always expanded first. Filling in a few details, we are led to the not surprising result that any \( w \in L(G) \) has a leftmost and a rightmost derivation (for details, see Exercise 25 at the end of this section).

---

**EXERCISES**

1. Find context-free grammars for the following languages:  
(a) \( L = a^n b^n \), \( n \) is even.  
(b) \( L = a^n b^n \), \( n \) is odd.  
(c) \( L = a^n b^n \), \( n \) is a multiple of three.  
(d) \( L = a^n b^n \), \( n \) is not a multiple of three.

2. Show a derivation tree for \( w = aaabbaaa \) using the grammar in Example 5.1.

3. Draw the derivation tree corresponding to the derivation in Example 5.1.

4. Give a derivation tree for \( w = abbbaabbaba \) for the grammar in Example 5.2.

5. Complete the arguments in Example 5.2, showing that the language given is generated by the grammar.

6. Show that the grammar in Example 5.4 does in fact generate the language described in Equation 5.1.

7. Is the language in Example 5.2 regular?

8. Complete the proof in Theorem 5.1 by showing that the yield of every partial derivation tree with root S is a sentential form of G.

9. Find context-free grammars for the following languages (with \( n \geq 0 \), \( m \geq 0 \)).  
(a) \( L = \{a^n b^m : n \leq m + 3\} \).  
(b) \( L = \{a^n b^m : n = m - 1\} \).  
(c) \( L = \{a^n b^m : n \neq 2m\} \).  
(d) \( L = \{a^n b^m : 2n \leq m \leq 3n\} \).  
(e) \( L = \{w \in [a, b]^* : n_a (w) \neq n_b (w)\} \).  
(f) \( L = \{w \in [a, b]^* : n_a (v) \geq n_b (v), \text{ where } v \text{ is any prefix of } w\} \).  
(g) \( L = \{w \in [a, b]^* : n_a (w) = 2n_b (w) + 1\} \).  
(h) \( L = \{w \in [a, b]^* : n_a (w) = n_b (w) + 2\} \).

10. What language does the grammar  
\[ S \rightarrow aSB|bSA \]  
\[ S \rightarrow \lambda \]  
\[ A \rightarrow a \]  
\[ B \rightarrow b \]  
generate?

11. What language does the grammar  
\[ S \rightarrow aasbb|SS \]  
\[ S \rightarrow \lambda \]  
generate?

12. Find context-free grammars for the following languages (with \( n \geq 0, m \geq 0, k \geq 0 \)):  
(a) \( L = \{a^n b^m c^k : n = m \text{ or } m \leq k\} \).  
(b) \( L = \{a^n b^m c^k : n = m \text{ or } m \neq k\} \).  
(c) \( L = \{a^n b^m c^k, k = n + m\} \).  
(d) \( L = \{a^n b^m c^k, k = |n - m|\} \).  
(e) \( L = \{a^n b^m c^k, k = n + 2m\} \).  
(f) \( L = \{a^n b^m c^k, k \neq n + m\} \).

13. Find a context-free grammar for  
\[ L = \{w \in \{[a, b, c] * .n_a(w) + n_b(w) \neq n_c(w)\}. \]

14. Show that \( L = \{w \in \{a, b, c\}^* : |w| = 3n_a(w)\} \) is a context-free language.

15. Find a context-free grammar for \(\Sigma = \{a, b\}\) for the language  
\[L = \{a^n w w^R b^n (w \in \Sigma^*, n \geq 1)\}.\]

16. Let \( L = \{a^n b^n : n \geq 0\} \).  
(a) Show that \( L^2 \) is context-free.  
(b) Show that \( L^k \) is context-free for all \( k > 1 \).  
(c) Show that \( L \) and \( L^* \) are context-free.

17. Let \( L_1 \) be the language in Exercise 12(a) and \( L_2 \) be the language in Exercise 12(d). Show that \( L_1 \cup L_2 \) is a context-free language.

18. Show that the following language is context-free:  
\[L = \{uv w v^R : u, v, w \in \{a, b\}^+, |u| = |w| = 2\}.\]

19. Show that the complement of the language in Example 5.1 is context-free.

20. Show that the complement of the language in Exercise 12(c) is context-free.

21. Show that the language  
\[L = \{w_1 c w_2 : w_1, w_2 \in \{a, b\}^+, w_1 \neq w_2^R\}, \text{ with } \Sigma = \{a, b, c\}, \text{ is context-free.}\]

22. Show a derivation tree for the string *aabbbb* with the grammar  
\[ S \rightarrow AB|\lambda, \]  
\[ A \rightarrow aB, \]  
\[ B \rightarrow Sb. \]  
Give a verbal description of the language generated by this grammar.

23. Consider the grammar with productions  
\[ S \rightarrow aaB, \]  
\[ A \rightarrow bBb|\lambda, \]  
\[ B \rightarrow Aa. \]  
Show that the string \( aabbabba \) is not in the language generated by this grammar.

24. Define what one might mean by properly nested parenthesis structures involving two kinds of parentheses, say () and []. Intuitively, properly nested strings in this situation are ([],), ([][]) [()], but not ([]) or (([]). Using your definition, give a context-free grammar for generating all properly nested parentheses.

25. Find a context-free grammar for the set of all regular expressions on the alphabet \([a, b]\).

26. Find a context-free grammar that can generate all the production rules for context-free grammars with \( T = \{a, b\} \) and \( V = \{A, B, C\} \).

27. Prove that if \( G \) is a context-free grammar, then every \( w \in L(G) \) has a leftmost and rightmost derivation. Give an algorithm for finding such derivations from a derivation tree.

28. Find a linear grammar for the language in Example 5.3.

29. Let \( G = (V, T, S, P) \) be a context-free grammar such that every one of its productions is of the form \( A \to v \), with \( |v| = k > 1 \). Show that the derivation tree for any \( w \in L(G) \) has a height \( b \) such that  
\[\log_k |w| \leq h \leq \frac{(|w| - 1)}{k - 1}.\]

---

**5.2 PARSING AND AMBIGUITY**

We have so far concentrated on the generative aspects of grammars. Given a grammar \( G \), we studied the set of strings that can be derived using \( G \). In cases of practical applications, we are also concerned with the analytical side of the grammar: Given a string \( w \) of terminals, we want to know whether or not \( w \) is in \( L(G) \). If so, we may want to find a derivation of \( w \). An algorithm that can tell us whether \( w \) is in \( L(G) \) is a membership algorithm. The term **parsing** describes finding a sequence of productions by which a \( w \in L(G) \) is derived.